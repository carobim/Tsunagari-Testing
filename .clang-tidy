Checks: '-*,bugprone-branch-clone,bugprone-copy-constructor-init,bugprone-exception-escape,readability-identifier-naming'
CheckOptions:
  - { key: readability-identifier-naming.ClassConstantCase,         value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstexprVariableCase,     value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumConstantCase,          value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantCase,        value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantPointerCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.LocalConstantCase,         value: UPPER_CASE }
  - { key: readability-identifier-naming.LocalConstantPointerCase,  value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase,        value: UPPER_CASE }
  - { key: readability-identifier-naming.ValueTemplateCase,         value: UPPER_CASE }  # Because it's a constant.

  - { key: readability-identifier-naming.ClassCase,                 value: CamelCase  }
  - { key: readability-identifier-naming.EnumCase,                  value: CamcelCase }
  - { key: readability-identifier-naming.StructCase,                value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,     value: CamelCase  }
  - { key: readability-identifier-naming.TypeAliasCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TypedefCase,               value: CamelCase  }
  - { key: readability-identifier-naming.TypeTemplateCase,          value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,                 value: CamelCase  }

  - { key: readability-identifier-naming.ClassMemberCase,           value: camelBack  }
  - { key: readability-identifier-naming.ClassVariableCase,         value: camelBack  }
  - { key: readability-identifier-naming.ConstantParameterCase,     value: camelBack  }
  - { key: readability-identifier-naming.ConstexprFunctionCase,     value: camelBack  }
  - { key: readability-identifier-naming.ConstexprMemberCase,       value: camelBack  }
  - { key: readability-identifier-naming.FunctionCase,              value: camelBack  }
  - { key: readability-identifier-naming.GlobalFunctionCase,        value: camelCase  }
  - { key: readability-identifier-naming.GlobalVariableCase,        value: camelCase  }
  - { key: readability-identifier-naming.LocalPointerCase,          value: camelBack  }
  - { key: readability-identifier-naming.MemberCase,                value: camelBack  }
  - { key: readability-identifier-naming.MethodCase,                value: camelBack  }
  - { key: readability-identifier-naming.ParameterCase,             value: camelBack  }
  - { key: readability-identifier-naming.PointerCase,               value: camelBack  }
  - { key: readability-identifier-naming.PrivateMemberCase,         value: camelBack  }
  - { key: readability-identifier-naming.PrivateMethodCase,         value: camelBack  }
  - { key: readability-identifier-naming.ProtectedMemberCase,       value: camelBack  }
  - { key: readability-identifier-naming.ProtectedMethodCase,       value: camelBack  }
  - { key: readability-identifier-naming.PublicMemberCase,          value: camelBack  }
  - { key: readability-identifier-naming.PublicMethodCase,          value: camelBack  }
  - { key: readability-identifier-naming.StaticVariableCase,        value: camelBack  }
  - { key: readability-identifier-naming.VariableCase,              value: camelBack  }
  - { key: readability-identifier-naming.VirtualMethodCase,         value: camelBack  }

  # UPPER_CASE, CamelCase, or camelBack depending on the production's syntax
  #- { key: readability-identifier-naming.MacroDefinitionCase,       value: }

